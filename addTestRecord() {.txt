addTestRecord() {

 echo "Please  Enter Patient ID (please enter exactly 7 digits):"
 read patientID
 count=$(echo -n "$patientID" | wc -c) #this line counts the number of digits in ID
 while [ "$count" -ne 7 ] && !(echo "$count" | grep -q '[A-Za-z]') 
 do
  echo "wrong input, please make sure that the ID has 7 digits"
  read patientID
  count=$(echo -n "$patientID" | wc -c) #this line counts the number of digits in ID
 done


 echo "Please Enter Test Name"
 read name
 while echo "$name" | grep -q '[0-9]' #this line checks if the name has ant number (-q search for a pattern quietly without producing output)
 do
  echo "Wrong input"
  read name
 done

 echo "Please Enter Date"
 read date
 while !(echo "$date" | grep -q '^[0-9]\{4\}-[0-9]\{2\}') #this line to make sure that the date like this (YYYY-MM)
 do
  echo "Wrong input"
  read date
 done

 echo "Please enter result:" #need to check if the  number is float
 read result
 while !(echo "$result" | grep -q '[0-9]')
 do 
  echo "Wrong input"
  read result
 done

echo "Please enter unit:" 
read unit
while true
do 
  if [ "$unit" = 'g/dL' ] || [ "$unit" = 'mg/dL' ] || [ "$unit" = 'mm Hg' ]
  then 
    break
  else
    echo "Wrong input"
    read unit
  fi
done

 echo "Please enter status:" 
 read status

  if [ "$status" != "Pending" -a "$status" != "Completed" -a "$status" != "Reviewed" ] #edit
  then
     echo "Invalid Status. Must be one of: Pending, Completed, Reviewed."
     exit 1 
    fi

 echo "$patientID: $name, $date, $result, $unit, $status" >> $"medicalRecord.txt"
 echo "successful"


}


# Function to search for tests by patient ID
search_by_patient_id() {
    echo "Enter Patient ID:"
    read patient_id
    if [[ ! "$patient_id" =~ ^[0-9]{7}$ ]]
    then
        echo "Invalid Patient ID. Must be a 7-digit integer."
        return
    fi
    echo "1. Retrieve all patient tests"
    echo "2. Retrieve all up normal patient tests"
    echo "3. Retrieve all patient tests in a specific period"
    echo "4. Retrieve all patient tests based on test status"
    echo -n "Enter your choice [1-4]:"
    read search_option

    case $search_option in
        1)
            grep "^$patient_id:" $"medicalRecord.txt"
            ;;
        2)  
            grep "^$patient_id:" $"medicalRecord.txt" | while read line
            do
               # Extract fields using cut 
               test_name=$(echo "$line" | cut -d, -f1 | cut -d' ' -f2)
               result=$(echo "$line" | cut -d, -f3 | cut -d' ' -f1)
               unit=$(echo "$line" | cut -d, -f4 | cut -d' ' -f2)
 # Retrieve normal range from the test file
               normal_range=$(grep "^Name:$test_name;" $"medicalTest.txt" | cut -d';' -f2 | cut -d' ' -f2)

               # Extract min and max range from the normal range
               min_range=$(echo "$normal_range" | cut -d',' -f1 | cut -d'>' -f2 | tr -d ' ')
               max_range=$(echo "$normal_range" | cut -d',' -f2 | cut -d'<' -f2 | tr -d ' ')

               # Check if the test result is outside the normal range
             if [ "$unit" == 'g/dL' ] || [ "$unit" == 'mg/dL' ] || [ "$unit" == 'mm Hg' ]; then
              if [[ ( ! -z "$min_range" && $(echo "$result < $min_range" | bc -l) ) || ( ! -z "$max_range" && $(echo "$result > $max_range" | bc -l) ) ]]
              then
                 echo "$line"
              fi
             fi
             done
           ;;
        3) echo -n "Enter start date (yyyy-mm): "
        read start_date
        echo -n "Enter end date (yyyy-mm): "
        read end_date

        grep "^$patient_id:" $"medicalRecord.txt" | while read -r line; do
        # Extract the test date from the line
        test_date=$(echo "$line" | cut -d',' -f2 | xargs)
    
        # Extract the remaining parts of the line
        remaining_line=$(echo "$line" | cut -d',' -f1,3-)
    
        # Check if the test date is within the specified range
        if [[ "$test_date" > "$start_date" && "$test_date" < "$end_date" ]]; then
        echo "$remaining_line"
        fi
        done 
           ;;
4)
            echo "Enter test status (e.g., Pending, Completed, Reviewed):"
            read  status
            if [ "$status" != "Pending" -a "$status" != "Completed" -a "$status" != "Reviewed" ]
            then
                echo "Invalid Status."
                return
            fi
             # Check if the test result is outside the normal range
               grep "^$patient_id:" $"medicalRecord.txt" | grep "$status"
            ;;
      *)
            echo "Invalid option."
            ;;
    esac
}

# Function to display the menu
show_menu() {
    echo "Medical Record Management System"
    echo "1. Add a new medical test record"
    echo "2. Search for tests by patient ID"
    echo "3. Update an existing test result"
    echo "4. Retrieve average test values"
    echo "5. Exit"
    echo -n "Enter your choice [1-5]: "
}

# Main loop
while true; do
    show_menu
    read choice
    case $choice in
        1) add_test_record ;;
        2) search_by_patient_id ;;
	 3) update_test_result ;;  # You should call the correct function here
        4) retrieve_average_test_values ;;  # You should call the correct function here
        5) exit 0 ;;
        *) echo "Invalid choice. Please enter a number between 1 and 5." ;;
    esac
done

